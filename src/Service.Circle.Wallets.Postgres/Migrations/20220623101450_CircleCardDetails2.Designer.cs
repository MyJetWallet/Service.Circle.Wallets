// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Service.Circle.Wallets.Postgres;

#nullable disable

namespace Service.Circle.Wallets.Postgres.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220623101450_CircleCardDetails2")]
    partial class CircleCardDetails2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("circle")
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Service.Circle.Wallets.Postgres.Models.CircleBankAccountEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("BankAccountId")
                        .HasColumnType("text");

                    b.Property<int>("BankAccountStatus")
                        .HasColumnType("integer");

                    b.Property<string>("BankAddressBankName")
                        .HasColumnType("text");

                    b.Property<string>("BankAddressCity")
                        .HasColumnType("text");

                    b.Property<string>("BankAddressCountry")
                        .HasColumnType("text");

                    b.Property<string>("BankAddressDistrict")
                        .HasColumnType("text");

                    b.Property<string>("BankAddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("BankAddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("BillingDetailsCity")
                        .HasColumnType("text");

                    b.Property<string>("BillingDetailsCountry")
                        .HasColumnType("text");

                    b.Property<string>("BillingDetailsDistrict")
                        .HasColumnType("text");

                    b.Property<string>("BillingDetailsLine1")
                        .HasColumnType("text");

                    b.Property<string>("BillingDetailsLine2")
                        .HasColumnType("text");

                    b.Property<string>("BillingDetailsName")
                        .HasColumnType("text");

                    b.Property<string>("BillingDetailsPostalCode")
                        .HasColumnType("text");

                    b.Property<string>("BrokerId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("FingerPrint")
                        .HasColumnType("text");

                    b.Property<string>("Iban")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("RoutingNumber")
                        .HasColumnType("text");

                    b.Property<string>("TrackingRef")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("BrokerId", "ClientId");

                    b.HasIndex("BrokerId", "ClientId", "IsActive");

                    b.ToTable("bank_accounts", "circle");
                });

            modelBuilder.Entity("Service.Circle.Wallets.Postgres.Models.CircleCardEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Bin")
                        .HasColumnType("text");

                    b.Property<string>("BrokerId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("CardName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("CircleCardId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<int?>("ExpMonth")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpYear")
                        .HasColumnType("integer");

                    b.Property<string>("FingerPrint")
                        .HasColumnType("text");

                    b.Property<int>("FundingType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("IssuerCountry")
                        .HasColumnType("text");

                    b.Property<string>("Last4")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Network")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CircleCardId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("BrokerId", "ClientId");

                    b.HasIndex("BrokerId", "ClientId", "IsActive");

                    b.ToTable("cards", "circle");
                });

            modelBuilder.Entity("Service.Circle.Wallets.Postgres.Models.CircleCardEntity", b =>
                {
                    b.OwnsOne("MyJetWallet.Circle.Models.RiskEvaluation", "RiskEvaluation", b1 =>
                        {
                            b1.Property<string>("CircleCardEntityId")
                                .HasColumnType("text");

                            b1.Property<int>("Decision")
                                .HasColumnType("integer");

                            b1.Property<string>("Reason")
                                .HasColumnType("text");

                            b1.HasKey("CircleCardEntityId");

                            b1.ToTable("cards", "circle");

                            b1.WithOwner()
                                .HasForeignKey("CircleCardEntityId");
                        });

                    b.Navigation("RiskEvaluation");
                });
#pragma warning restore 612, 618
        }
    }
}
